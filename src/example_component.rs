/*!
An example of the types generated by the `component!` macro

Syntax is similar to a `struct`. For each component, a unit `struct` is created,
and a variant is added to a `Component` `enum`.

To add attributes or documentation to the generated `Component` `enum`, simple put them
at the top of the macro body.

Attributes or documentation for specific components must be put before the component
declaration and marked with either `#unit` or `#variant`:
* Attributes marked `#unit` will be applied to the generated unit struct for that component.
* Attributes marked `#variant` will be applied to the component's variant in the generated `Component` `enum`

The contents of this module were generated by the following code:
```
eks::component! {
    /// A component generated by the `component!` macro
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    ExampleComponent {

        #unit /// A simple boolean component
        #variant /// The `Bool` variant
        Bool: bool,

        #unit /// A simple integer component
        #variant /// The `Number` variant
        Number: isize,

        #unit /// A simple flag component
        #variant /// The `Flag` variant
        Flag: ()
    }
}
```
*/

mod eks {
    pub use crate::*;
}

eks::component! {
    /// An component generated by the `component!` macro
    #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]
    ExampleComponent {

        #unit /// A simple boolean component
        #variant /// The `Bool` variant
        Bool: bool,

        #unit /// A simple integer component
        #variant /// The `Number` variant
        Number: isize,

        #unit /// A simple flag component
        #variant /// The `Flag` variant
        Flag: ()
    }
}
